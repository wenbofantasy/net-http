require "net/http"
#uri = URI('http://localhost:3000/top')
#res = Net::HTTP.post_form(uri, 'q' => '10', 'max' => '50')
#puts res.body


#uri = URI('http://localhost:3000/top?q=10')
#puts Net::HTTP.get(uri) # => String)'')
#uri = URI('http://localhost:3000/top')
#params = { :limit => 10, :page => 3 }
#uri.query = URI.encode_www_form(params)

#res = Net::HTTP.get_response(uri)
#puts res.body if res.is_a?(Net::HTTPSuccess)

#Net::HTTP.version_1_2   # 设定对象的运作方式
#Net::HTTP.get_print 'www.example.com', '/index.html'

#uri = URI('http://example.com/index.html')
#params = { :limit => 10, :page => 3 }
#uri.query = URI.encode_www_form(params)

#res = Net::HTTP.get_response(uri)
#puts res.body if res.is_a?(Net::HTTPSuccess)


#uri = URI('http://example.com/index.html')
#res = Net::HTTP.get_response(uri)

#res['Set-Cookie']            # => String
#res.get_fields('set-cookie') # => Array
#res.to_hash['set-cookie']    # => Array
#puts "Headers: #{res.to_hash.inspect}"

#puts res.code       # => '200'
#puts res.message    # => 'OK'
#puts res.class.name # => 'HTTPOK'
## Body
#puts res.body if res.response_body_permitted?


#def fetch(uri_str, limit = 10)
    ## You should choose a better exception.
  #raise ArgumentError, 'too many HTTP redirects' if limit == 0

  #response = Net::HTTP.get_response(URI(uri_str))

  #case response
  #when Net::HTTPSuccess then
    #response
  #when Net::HTTPRedirection then
    #location = response['location']
    #warn "redirected to #{location}"
    #fetch(location, limit - 1)
  #else
    #response.value
  #end
#end
#puts fetch('http://www.ruby-lang.org')

#uri = URI('http://www.example.com/todo.cgi')
#req = Net::HTTP::Post.new(uri)
#req.set_form_data('from' => '2005-01-01', 'to' => '2005-03-31')

#res = Net::HTTP.start(uri.hostname, uri.port) do |http|
  #http.request(req)
#end

#case res
#when Net::HTTPSuccess, Net::HTTPRedirection
  ## OK
#else
  #res.value
#end












